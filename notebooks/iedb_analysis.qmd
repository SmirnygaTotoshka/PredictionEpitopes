---
title: "Исследование базы данных Immune Epitope Database на предмет необходимой информации для моделирования процессинга антигенов для HLA первого класса"
author: "Антон Смирнов"
date: "Feb 16, 2023"
date-format: "MMM D, YYYY"
toc: true
toc-depth: 3
tbl-cap-location: top
toc-title: "Оглавление"
fontsize: 14pt
engine: knitr
linestretch: 1.5
geometry:
  - top=10mm
  - left=20mm
  - right=20mm
  - heightrounded
format:
  html:
    theme: cosmo
  pdf:
    documentclass: report
    pdf-engine: xelatex
    header-includes: |
      \usepackage[utf8]{inputenc}
      \usepackage[american,russian]{babel}
      \usepackage{hyperref}  
      \usepackage{unicode-math}
mainfont: Arial
monofont: Arial
sansfont: Arial
editor: visual
---

# Введение

Immune Epitope Database представляет из себя крупнейшую базу данных и базу знаний о Т- и В- клеточных эпитопах. Она курируется Национальным институтом аллергии и инфекционных болезней США. Количество информации в ней на 16 февраля 2023 года представлено в таблице 1.

| Характеристика           | Количество |
|--------------------------|------------|
| Peptidic Epitopes        | 1,554,329  |
| Non-Peptidic Epitopes    | 3,168      |
| T Cell Assays            | 453,372    |
| B Cell Assays            | 1,378,855  |
| MHC Ligand Assays        | 4,697,592  |
| Epitope Source Organisms | 4,337      |
| Restricting MHC Alleles  | 983        |
| References               | 23,554     |

: Метрики БД

Дамп базы данных был скачан с сайта iedb.org и развернут на локальном сервере MySQL.

```{r, include=F}
#Для корректной работы других языков
1+1
```

```{bash}
mysql --version
```

Скрипт восстановления БД.

    mysql -u stotoshka -p
    mysql> create database iedb;
    mysql> use iedb;
    mysql> source <path to sql_script>;

Необходимые библиотеки

```{r message=FALSE, warning=FALSE}
library(RMySQL)
library(dplyr)
library(stringr)
library(knitr)
library(vroom)
```

Подключимся к базе данных

```{r}
con = RMySQL::dbConnect(RMySQL::MySQL(),
                            dbname='iedb',
                            host='localhost',
                            port=3306,
                            user='stotoshka',
                            password='meowmeow')
```

# Подготовка данных

## Поиск расположения необходимых данных

Для начала посмотрим каких типов эксперименты хранятся в этой базе данных.

```{sql connection=con}
SELECT DISTINCT category FROM assay_type;
```

В данный момент на не интересуют эксперименты на В-лимфоцитах. Посмотрим, какие эксперименты проводят на Т-клетках.

```{sql connection=con}
#| output.var: "tcell.assays"
SELECT DISTINCT assay_type FROM assay_type WHERE category = 'T Cell';
```

```{r}
#| echo: false
kable(tcell.assays)
```

Эти эксперименты связаны с детекцией распознавания антигена Т-клеточным рецептором. В данный момент они нам скорее всего не подходят, потому что эти эксперименты не ставили задачу определения связывания эпитопа и HLA. Они могут внести сильное смещение в прогноз, так как содержат большое количество положительных примеров.

```{sql connection=con}
#| output.var: "mhc.assays"
SELECT DISTINCT assay_type FROM assay_type WHERE category = 'MHC';
```

```{r}
#| echo: false
kable(mhc.assays)
```

```{sql connection=con}
SELECT DISTINCT assay_type FROM assay_type WHERE category = 'Naturally Processed';
```

Типы экспериментов 'MHC' и 'Naturally Procecessed', так как методы, содержащиеся в них, направлены на определение связывания эпитопа и MHC.

```{sql connection=con}
#| output.var: "mhc.elution.assays"
SELECT DISTINCT at2.category,at2.assay_type FROM mhc_elution me 
INNER JOIN assay_type at2 ON as_type_id  = at2.assay_type_id;
```

```{r}
#| echo: false
kable(mhc.elution.assays)
```

```{sql connection=con}
#| output.var: "mhc.bind.assays"
SELECT DISTINCT at2.category,at2.assay_type FROM mhc_bind mb
INNER JOIN assay_type at2 ON as_type_id  = at2.assay_type_id 
```

```{r}
#| echo: false
kable(mhc.bind.assays)
```

Данные типы находятся в таблицах ***mhc_bind*** и ***mhc_elution***.

## Подготовка mhc_bind

Необходимо, чтобы присутствовала информация об аллеле HLA, эпитопе, источнике и результате эксперимента.

```{sql connection=con, eval = F}
CREATE TABLE filtered_bind
AS (SELECT reference_id, curated_epitope_id, as_char_value,
as_location, category, assay_type,units,
as_num_value,as_inequality,as_comments, mhc_allele_restriction_id 
    FROM mhc_bind
    INNER JOIN assay_type ON as_type_id = assay_type_id
    WHERE reference_id IS NOT NULL AND
          curated_epitope_id IS NOT NULL AND
          as_char_value IS NOT NULL AND
          mhc_allele_restriction_id IS NOT NULL);
```

Создадим индекс для быстродействия.[^1]

[^1]: MySQL не поддерживает индексацию представлений, поэтому я вынужден создавать таблицы.

```{sql connection=con, eval = F}
CREATE INDEX filtered_bind_index ON filtered_bind (curated_epitope_id,mhc_allele_restriction_id);
```

Количество строк

```{sql connection=con}
SELECT COUNT(*) FROM filtered_bind;
```

## Подготовка mhc_elution

Отфильтруем строки с пустыми полями

```{sql connection=con, eval = F}
CREATE TABLE filtered_elution
AS (SELECT reference_id, curated_epitope_id, as_char_value, as_location, 
category, assay_type, as_num_value, as_inequality, units, 
as_num_subjects, as_num_responded, as_response_frequency, as_comments,
as_immunization_comments,h_sex, h_age, mhc_allele_restriction_id,
h_organism_id, ant_type, ant_ref_name, ant_object_id, apc_cell_type,
apc_tissue_type, apc_origin
    FROM mhc_elution
    INNER JOIN assay_type ON as_type_id = assay_type_id
    WHERE reference_id IS NOT NULL AND
          curated_epitope_id IS NOT NULL AND
          as_char_value IS NOT NULL AND
          mhc_allele_restriction_id IS NOT NULL);
```

```{sql connection=con, eval = F}
CREATE INDEX filtered_elution_index ON filtered_elution (curated_epitope_id,mhc_allele_restriction_id);
```

Количество строк

```{sql connection=con}
SELECT COUNT(*) FROM filtered_elution;
```

## Подготовка mhc_restrinction и epitopes

Также необходимо к имеющимся таблицам присоединить информацию о MHC аллелях и эпитопах. Делаю раздельно в связи с долгим временем выполнения, если делать вместе.

Необходимо, что последовательность была линейная, без модификаций и была в наличии референсная последовательность.

```{sql connection=con, eval = F}
CREATE TABLE filtered_epitope_cur
AS (SELECT curated_epitope_id, e_name, 
source_antigen_accession, description ,e_region_domain_flag,
e_ev, linear_peptide_seq, e_ref_start,
e_ref_end, `database`, name, sequence, organism_name
    FROM curated_epitope
    INNER JOIN epitope_object eo ON eo.object_id = e_object_id
    INNER JOIN epitope e ON e.epitope_id = eo.epitope_id
    INNER JOIN source s ON s.accession = source_antigen_accession
    WHERE linear_peptide_seq IS NOT NULL AND 
          linear_peptide_modification IS NULL AND
          sequence IS NOT NULL);
```

```{sql connection=con, eval = F}
CREATE INDEX filtered_epitope_cur_index ON filtered_epitope_cur (curated_epitope_id);
```

```{sql connection=con}
SELECT COUNT(curated_epitope_id) FROM filtered_epitope_cur;
```

Нам нужны человеческие (NCBI Taxonomy ID 9606) МНС 1 класса.

```{sql connection=con, eval = F}
CREATE TABLE filtered_mhc
AS (SELECT mhc_allele_restriction_id, 
restriction_level,displayed_restriction, organism_ncbi_tax_id,class, chain_i_name
    FROM mhc_allele_restriction
    WHERE restriction_level = 'complete molecule' AND
          organism_ncbi_tax_id = 9606 AND
          class = 'I');
```

```{sql connection=con, eval = F}
CREATE INDEX filtered_mhc_index ON filtered_mhc (mhc_allele_restriction_id);
```

```{sql connection=con}
SELECT COUNT(*) FROM filtered_mhc;
```

## Объедним вместе

```{sql connection=con,eval = F}
CREATE TABLE epi_mhc_bind
AS (SELECT fb.curated_epitope_id, fb.mhc_allele_restriction_id, reference_id, as_char_value, as_location, 
category, assay_type,units,as_num_value,as_inequality,as_comments,
e_name, source_antigen_accession, description ,e_region_domain_flag, e_ev, linear_peptide_seq, 
e_ref_start,e_ref_end, `database`, name, sequence, organism_name, 
restriction_level,displayed_restriction, organism_ncbi_tax_id,class, chain_i_name
    FROM filtered_bind fb
    INNER JOIN filtered_mhc fm ON fm.mhc_allele_restriction_id = fb.mhc_allele_restriction_id
    INNER JOIN filtered_epitope_cur fe ON fe.curated_epitope_id = fb.curated_epitope_id);
```

```{sql connection=con,eval = F}
CREATE INDEX epi_mhc_bind_index ON epi_mhc_bind (curated_epitope_id,mhc_allele_restriction_id);
```

```{sql connection=con}
SELECT COUNT(*) FROM epi_mhc_bind;
```

```{sql connection=con, eval = F}
CREATE TABLE epi_mhc_elution
AS (SELECT reference_id, fel.curated_epitope_id, as_char_value, as_location, 
category, assay_type, as_num_value, as_inequality, units, 
as_num_subjects, as_num_responded, as_response_frequency, as_comments,
as_immunization_comments,h_sex, h_age, fel.mhc_allele_restriction_id,
h_organism_id, ant_type, ant_ref_name, ant_object_id, apc_cell_type,
apc_tissue_type, apc_origin,
e_name, source_antigen_accession, description ,e_region_domain_flag, e_ev, linear_peptide_seq, e_ref_start,e_ref_end, `database`, name, sequence, organism_name, 
restriction_level,displayed_restriction, organism_ncbi_tax_id,class, chain_i_name
    FROM filtered_elution fel
    INNER JOIN filtered_mhc fm ON fm.mhc_allele_restriction_id = fel.mhc_allele_restriction_id
    INNER JOIN filtered_epitope_cur fe ON fe.curated_epitope_id = fel.curated_epitope_id);
```

```{sql connection=con,eval = F}
CREATE INDEX epi_mhc_elution_index ON epi_mhc_elution (curated_epitope_id,mhc_allele_restriction_id);
```

```{sql connection=con}
SELECT COUNT(*) FROM epi_mhc_elution;
```

Сохраним данные

```{r,eval = F}
bind.assays = RMySQL::dbReadTable(con, "epi_mhc_bind")
elution.assays = RMySQL::dbReadTable(con, "epi_mhc_elution")
write.table(bind.assays, "../data/source/iedb_bind_assays.tsv", sep = "\t",row.names = F,fileEncoding = "UTF-8")
write.table(elution.assays, "../data/source/iedb_elution_assays.tsv", sep = "\t",row.names = F,fileEncoding = "UTF-8")
```

# Анализ bind assays

```{r,echo=F}
bind.assays = vroom("../data/source/iedb_bind_assays.tsv",delim = "\t") %>% as.data.frame()
str(bind.assays)
```

Все ли записи имеют ссылку на источник?

```{r,echo=F}
sum(is.na(bind.assays$reference_id)) == 0
```

Все ли эксперименты имеют запись о результате?

```{r,echo=F}
sum(is.na(bind.assays$as_char_value)) == 0
```

Все ли последовательности валидные?

::: panel-tabset
#### Эпитопы

```{r,echo=F}
sum(grepl("[ACDEFGHIKLMNPQRSTVWYU]",bind.assays$linear_peptide_seq)) == nrow(bind.assays)
```

#### Их источники

```{r,echo=F}
sum(grepl("[ACDEFGHIKLMNPQRSTVWYU]",bind.assays$linear_peptide_seq)) == nrow(bind.assays)
```
#### Все эпитопы можно найти в их источнике?
```{r,echo=F}
ind = seq_len(nrow(bind.assays))
has.epitope = sapply(ind,function(i){
  grepl(bind.assays$linear_peptide_seq[i],bind.assays$sequence[i],fixed = T)
  })
sum(has.epitope) == nrow(bind.assays)
```
:::

Отфильтруем несовпадения
```{r,echo=F}
print(paste("Количество строк до",dim(bind.assays)[1]))
bind.assays = bind.assays[has.epitope,]
print(paste("Количество строк после",dim(bind.assays)[1]))
```


Распределение результатов экпериментов.

```{r,echo=F}
kable(table(bind.assays$as_char_value))
```

Сделаем два уровня значений результатов: положительный и отрицательный.

```{r,echo=F}
bind.assays[grep("Positive", bind.assays$as_char_value),"as_char_value"] = "Positive"
kable(table(bind.assays$as_char_value), col.names = c("Value","Freq"),format = "pipe")
```

Распределение по типам экспериментов в процентах.

```{r,echo=F}
kable(round(table(bind.assays$category) / nrow(bind.assays) * 100,2),col.names = c("Value","Procent"))
```

```{r,echo=F}
kable(round(table(bind.assays$assay_type) / nrow(bind.assays) * 100,2),col.names = c("Value","Procent"))
```

Как много записей имеют замерянное значение?

```{r,echo=F}
round(sum(!is.na(bind.assays$as_num_value)) / nrow(bind.assays) * 100,2)
```

Сколько из них имеют точное значение и каков исход?

```{r,echo=F}
eq.val = bind.assays[grepl("=",bind.assays$as_inequality,fixed = T),c("as_char_value","as_num_value","category","chain_i_name")]
print(nrow(eq.val))
kable(round(table(eq.val$as_char_value) / nrow(eq.val) * 100,2),col.names = c("Value","Procent"))
```

Данные об эпитопах
```{r,echo=F}
kable(round(table(bind.assays$e_ev) / nrow(bind.assays) * 100,2),col.names = c("Value","Procent"))
```
Фильтровать по этому критерию не считаю нужным, так как все имеющиеся эпитопы находятся в референсной последовательности
```{r,echo=F}
kable(round(table(bind.assays$e_region_domain_flag) / nrow(bind.assays) * 100,2),col.names = c("Value","Procent"))
```
Имеет смысл оставить записи, в которых представлена точная последовательность эпитопа. 
```{r,echo=F}
print(paste("Количество строк до",dim(bind.assays)[1]))
bind.assays = bind.assays[grepl("Exact Epitope", bind.assays$e_region_domain_flag,fixed = T),]
print(paste("Количество строк после",dim(bind.assays)[1]))
```

Комментарии к экспериментам
```{r,echo=F}
print(paste("Количество",length(unique(bind.assays$as_comments))))
```

Сохраним их в отдельный файл и изучим отдельно
```{r,echo=F}
write.table(unique(bind.assays$as_comments),"../data/bind_assay_comments.txt")
```

