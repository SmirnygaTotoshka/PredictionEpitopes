---
title: "Исследование базы данных Immune Epitope Database на предмет необходимой информации для моделирования процессинга антигенов для HLA первого класса"
author: "Антон Смирнов"
date: "Feb 16, 2023"
date-format: "MMM D, YYYY"
toc: true
toc-depth: 3
tbl-cap-location: top
toc-title: "Оглавление"
fontsize: 14pt
engine: knitr
linestretch: 1.5
geometry:
  - top=10mm
  - left=20mm
  - right=20mm
  - heightrounded
format:
  html:
    theme: cosmo
  pdf:
    documentclass: report
    pdf-engine: xelatex
    header-includes: |
      \usepackage[utf8]{inputenc}
      \usepackage[american,russian]{babel}
      \usepackage{hyperref}  
      \usepackage{unicode-math}
mainfont: Arial
monofont: Arial
sansfont: Arial
editor: visual
---

# Введение

Immune Epitope Database представляет из себя крупнейшую базу данных и базу знаний о Т- и В- клеточных эпитопах. Она курируется Национальным институтом аллергии и инфекционных болезней США. Количество информации в ней на 16 февраля 2023 года представлено в таблице 1.

| Характеристика           | Количество |
|--------------------------|------------|
| Peptidic Epitopes        | 1,554,329  |
| Non-Peptidic Epitopes    | 3,168      |
| T Cell Assays            | 453,372    |
| B Cell Assays            | 1,378,855  |
| MHC Ligand Assays        | 4,697,592  |
| Epitope Source Organisms | 4,337      |
| Restricting MHC Alleles  | 983        |
| References               | 23,554     |

: Метрики БД

Дамп базы данных был скачан с сайта iedb.org и развернут на локальном сервере MySQL.

```{r echo=F,message=FALSE, warning=FALSE}
library(RMySQL)
library(dplyr)
library(stringr)
library(knitr)
library(vroom)
library(ggplot2)

setwd("/home/stotoshka/Documents/Epitops/PredictionEpitopes")
```

## Версии используемых библиотек

### R
```{r,echo = F}
print(R.version.string)

print(paste("RMySQL",packageVersion("RMySQL")))
print(paste("dplyr",packageVersion("dplyr")))
print(paste("stringr",packageVersion("stringr")))
print(paste("knitr",packageVersion("knitr")))
print(paste("vroom",packageVersion("vroom")))
print(paste("ggplot2",packageVersion("ggplot2")))
```

### python
```{python, echo = F}
import sys
import logomaker
import matplotlib
import matplotlib.pyplot as plt

print("Python\n" + sys.version)
print("logomaker 0.8")
print("matplotlib " + matplotlib.__version__)

```

### MySQL
```{bash, echo = F}
mysql --version
```

Скрипт восстановления БД.

    mysql -u stotoshka -p
    mysql> create database iedb;
    mysql> use iedb;
    mysql> source <path to sql_script>;

Подключимся к базе данных

```{r}
con = RMySQL::dbConnect(RMySQL::MySQL(),
                            dbname='iedb',
                            host='localhost',
                            port=3306,
                            user='stotoshka',
                            password='meowmeow')
```

# Подготовка данных

## Поиск расположения необходимых данных

Для начала посмотрим каких типов эксперименты хранятся в этой базе данных.

```{sql connection=con}
SELECT DISTINCT category FROM assay_type;
```

В данный момент на не интересуют эксперименты на В-лимфоцитах. Посмотрим, какие эксперименты проводят на Т-клетках.

```{sql connection=con}
#| output.var: "tcell.assays"
SELECT DISTINCT assay_type FROM assay_type WHERE category = 'T Cell';
```

```{r}
#| echo: false
kable(tcell.assays)
```

Эти эксперименты связаны с детекцией распознавания антигена Т-клеточным рецептором. В данный момент они нам скорее всего не подходят, потому что эти эксперименты не ставили задачу определения связывания эпитопа и HLA. Они могут внести сильное смещение в прогноз, так как содержат большое количество положительных примеров.

```{sql connection=con}
#| output.var: "mhc.assays"
SELECT DISTINCT assay_type FROM assay_type WHERE category = 'MHC';
```

```{r}
#| echo: false
kable(mhc.assays)
```

```{sql connection=con}
SELECT DISTINCT assay_type FROM assay_type WHERE category = 'Naturally Processed';
```

Типы экспериментов 'MHC' и 'Naturally Procecessed', так как методы, содержащиеся в них, направлены на определение связывания эпитопа и MHC.

```{sql connection=con}
#| output.var: "mhc.elution.assays"
SELECT DISTINCT at2.category,at2.assay_type FROM mhc_elution me 
INNER JOIN assay_type at2 ON as_type_id  = at2.assay_type_id;
```

```{r}
#| echo: false
kable(mhc.elution.assays)
```

```{sql connection=con}
#| output.var: "mhc.bind.assays"
SELECT DISTINCT at2.category,at2.assay_type FROM mhc_bind mb
INNER JOIN assay_type at2 ON as_type_id  = at2.assay_type_id 
```

```{r}
#| echo: false
kable(mhc.bind.assays)
```

Данные типы находятся в таблицах ***mhc_bind*** и ***mhc_elution***.

## Получение данных

Скрипт *iedb_create_mhc_tables.sql* содержит описание первичной подготовки таблиц.

Критерии фильтрации следующие:

-   mhc_bind и mhc_elution

    -   Должен быть ИД публикации

    -   Должен быть ИД эпитопа

    -   Должен быть исход эксперимента

    -   Должен быть ИД аллеля MHC

-   для эпитопов

    -   Должна быть линейная последовательность эпитопа

    -   Эта последовательность не должна содержать модификаций

    -   Должна быть последовательность белка-источника

-   для аллеля МНС

    -   аллель должен быть человеческий

    -   аллель должен быть первого класса МНС

    -   аллель должен быть записан в формате HLA-(ген)\*(аллельная группа):(белковый продукт)

::: panel-tabset
**Количество строк в таблицах**

#### mhc_bind

```{sql connection=con, echo = F}
SELECT COUNT(*) FROM epi_mhc_bind;
```

#### mhc_elution

```{sql connection=con, echo = F}
SELECT COUNT(*) FROM epi_mhc_elution;
```
:::

# Анализ bind assays

Скрипт *iedb_clean_mhc_bind.R* производит вторичную очистку данных, полученных ранее, по следующим критериям:

1. У каждой записи должен быть источник
2. У каждой записи должен быть исход эксперимента
3. Последовательности должны быть записаны однобуквенным кодом для аминокислот
4. Эпитоп должен находиться в референсной последовательности
5. Эпитоп должен быть полным. Это не должен быть участок антигенного сайта или частью большего эпитопа.
6. Информация в комментариях не должна противоречить исходу эксперимента 
7. Результаты должны быть получены экспериментально, не быть предсказанными
8. Эпитопы должны быть иммуногенными
9. Не должно быть дефицита по TAP
10. Все HLA аллели должны быть записаны в формате, позволяющем однозначно идентифицировать молекулу


```{r,echo=F}
bind.assays = vroom("../data/source/iedb_bind_assays_clean.tsv",show_col_types = FALSE) %>% as.data.frame()
print(paste("Количество строк",nrow(bind.assays)))
```

## Эксперименты
```{r,echo=F}
kable(table(bind.assays$as_char_value), col.names = c("Value","Number"),format = "pipe", caption = "Распределение исходов экспериментов")
```

```{r,echo=F}
kable(round(table(bind.assays$category) / nrow(bind.assays) * 100,2),col.names = c("Value","Procent"), caption = "Категория экспериментов")
```

```{r,echo=F}
kable(round(table(bind.assays$assay_type) / nrow(bind.assays) * 100,2),col.names = c("Value","Procent"), caption = "Виды экспериментов")
```

```{r,echo=F}
kable(table(bind.assays$as_char_value), col.names = c("Value","Number"),format = "pipe", caption = "Распределение исходов экспериментов")
```

## Измерянные метрики

Некоторые эксперименты имеют точно измерянную метрику. Посмотрим, какие метрики используются, их распределение
```{r,echo=F}
eq.val = bind.assays[grepl("=",bind.assays$as_inequality,fixed = T) & !is.na(bind.assays$as_num_value),c("as_char_value","as_num_value","units","assay_type")]
print(paste("Количество строк",nrow(eq.val)))
```

```{r,echo=F}
kable(table(eq.val[,c("assay_type",
                      "units")],useNA = "always"),format = "pipe", caption = "Ед.измерения")
```

**Для нМ**
```{r,echo=F}
eq.val.nM = subset.data.frame(eq.val, units == "nM")
#log(x+pseudocount) чтобы не было log(0)
eq.val.nM$log_num_val = log10(eq.val.nM$as_num_value+0.00001)
ggplot(eq.val.nM, aes(x=as_char_value, y=log_num_val, fill=as_char_value)) +
 geom_violin()+
  labs(title="Measured value distribution",x="Outcome", y = "Value, log10(nM)")+
  geom_boxplot(width=0.1)+scale_fill_manual(values=c("#999999", "#E69F00"))
```


**Для минут**
```{r,echo=F}
eq.val.min = subset.data.frame(eq.val, units == "min")
eq.val.min$log_num_val = log10(eq.val.min$as_num_value+0.00001)
ggplot(eq.val.min, aes(x=as_char_value, y=log_num_val, fill=as_char_value)) +
 geom_violin()+
  labs(title="Measured value distribution",x="Outcome", y = "Value, log10(min)")+
  geom_boxplot(width=0.1)+scale_fill_manual(values=c("#999999", "#E69F00"))
```


**Для ангстрём**
```{r,echo=F}
eq.val.a = subset.data.frame(eq.val, units == "angstroms")
ggplot(eq.val.a, aes(x=as_char_value, y=as_num_value, fill=as_char_value)) +
 geom_violin()+
  labs(title="Measured value distribution",x="Outcome", y = "Value, A")+
  geom_boxplot(width=0.1)+scale_fill_manual(values=c("red"))
```


**Для °C**
```{r,echo=F}
eq.val.C = subset.data.frame(eq.val, units == "°C")
ggplot(eq.val.C, aes(x=as_char_value, y=as_num_value, fill=as_char_value)) +
 geom_violin()+
  labs(title="Measured value distribution",x="Outcome", y = "Value, C")+
  geom_boxplot(width=0.1)+scale_fill_manual(values=c("#999999", "#E69F00"))
```

## Распределение длины эпитопов и аминокислотного состава

```{r,echo=F, warning=F}
bind.assays$len.epitope = sapply(bind.assays$linear_peptide_seq, str_length)

ggplot(bind.assays) + geom_bar(aes(x = len.epitope,fill = as_char_value), position = "dodge") + scale_y_log10() + scale_x_continuous(limits = c(6, 20)) + labs(x = "Epitope length", title = "Epitope size distribution", y = "log10(count)")
```

```{r, echo = F}
#| output.var: "probs_pos"
bind.pos = subset.data.frame(bind.assays, as_char_value == "Positive")
probs = data.frame(matrix(0,nrow = 20,ncol = 20))
colnames(probs) = unlist(str_split("ACDEFGHIKLMNPQRSTVWY",pattern = ""))
epitopes = unique(bind.pos$linear_peptide_seq)
print(paste("Положительные случаи, уникальные эпитопы",length(epitopes),"шт."))
for (i in seq_len(nrow(probs))) {
  p = table(sapply(epitopes,str_sub,i,i))
  for (j in colnames(probs)) {
    if(is.na(p[j])){
      probs[i,j] = 0
    }
    else{
      probs[i,j] = p[j]
    }
  }
}
probs_pos = probs / length(epitopes)
```
```{r, echo = F}
#| output.var: "probs_neg"
bind.neg = subset.data.frame(bind.assays, as_char_value == "Negative")
probs = data.frame(matrix(0,nrow = 20,ncol = 20))
colnames(probs) = unlist(str_split("ACDEFGHIKLMNPQRSTVWY",pattern = ""))
epitopes = unique(bind.neg$linear_peptide_seq)
print(paste("Отрицательные случаи, уникальные эпитопы",length(epitopes),"шт."))
for (i in seq_len(nrow(probs))) {
  p = table(sapply(epitopes,str_sub,i,i))
  for (j in colnames(probs)) {
    if(is.na(p[j])){
      probs[i,j] = 0
    }
    else{
      probs[i,j] = p[j]
    }
  }
}
probs_neg = probs / length(epitopes)
```

```{python, echo = F}
probs_pos = r.probs_pos
probs_neg = r.probs_neg

fig,ax = plt.subplots(2, figsize = (10,12))
ax[0].set_title("IEDB positive epitopes")
ax[1].set_title("IEDB negative epitopes")
logo_pos = logomaker.Logo(probs_pos.iloc[0:12,:], color_scheme = "chemistry", ax = ax[0])
logo_neg = logomaker.Logo(probs_neg.iloc[0:12,:], color_scheme = "chemistry", ax = ax[1])
fig.tight_layout()
plt.show()
```

## Виды - источники эпитопов
```{r, echo = F}
print(paste("Всего видов",length(unique(bind.assays$organism_name))))
```

```{r, echo = F}
kable(sort(round(table(bind.assays$organism_name,useNA = "always") / nrow(bind.assays) * 100,2),decreasing = T)[1:10],format = "pipe", caption = "Топ-10 видов")
```
## Распределение аллелей HLA
```{r, echo = F}
print(paste("Всего аллелей",length(unique(bind.assays$chain_i_name))))
```

```{r, echo = F}
kable(sort(round(table(bind.assays$chain_i_name,useNA = "always") / nrow(bind.assays) * 100,2),decreasing = T)[1:10],format = "pipe", caption = "Топ-10 аллелей")
```

# Анализ elution assays